/* ============================================= */
/* --- IMPOSTAZIONI GLOBALI --- */
/* ============================================= */
:root {
    --primary-color: #0056b3;
    --text-color: #333;
    --background-color: #f5f8fa; /* Leggermente pi√π chiaro */
    --surface-color: #ffffff;
    --border-color: #e6e6e6; /* Bordo pi√π leggero */
    --shadow-soft: 0 4px 12px rgba(0,0,0,0.08); /* Ombra pi√π morbida */
    --shadow-hover: 0 8px 16px rgba(0,0,0,0.12);
    --main-font: 'Poppins', system-ui, sans-serif;
    --border-radius: 10px; /* Angoli leggermente pi√π arrotondati */
}

html { scroll-behavior: smooth; }
body { font-family: var(--main-font); margin: 0; background-color: var(--background-color); color: var(--text-color); line-height: 1.6; }

/* ============================================= */
/* --- HEADER (MOBILE FIRST con effetto scroll) --- */
/* ============================================= */
header {
    display: flex;
    flex-direction: column; /* Logo sopra, menu sotto */
    align-items: center;   /* Tutto centrato */
    padding: 20px;
    gap: 15px;             /* Spazio tra logo e menu */
    background: var(--surface-color);
    position: sticky; /* Rende l'header fisso */
    top: 0;
    z-index: 10;
    transition: transform 0.4s ease, opacity 0.4s ease, box-shadow 0.3s ease; /* Transizione per nascondere e ombra */
    box-shadow: var(--shadow-soft);
}
/* Classe per nascondere l'header allo scroll */
header.hidden {
    opacity: 0;
    transform: translateY(-100%); /* Scivola verso l'alto */
    pointer-events: none; /* Rende non cliccabile quando nascosto */
}
.logo { width: 220px; max-width: 90%; height: auto; transition: all 0.3s ease; }
.nav-links { background-color: var(--primary-color); width: 100%; display: flex; justify-content: center; gap: 1.5rem; padding: 0.6rem 0; margin-top: 10px; border-radius: 5px;}
.nav-links a { color: white; text-decoration: none; font-weight: 500; font-size: 0.9rem; }

/* ============================================= */
/* --- CONTENUTO PRINCIPALE --- */
/* ============================================= */
main { padding: 1.5rem; text-align: center; max-width: 1200px; margin: 0 auto; }
.intro { margin-bottom: 2rem; }
.titolo { font-size: 1.4rem; font-weight: 600; margin-bottom: 0.3rem; color: #333; }
.codice-dv { color: var(--primary-color); font-weight: 700; font-size: 1.4em; margin-bottom: 1.5rem; }

/* Titoli Sezione */
h2 { color: var(--primary-color); font-size: 1.1rem; margin: 2rem 0 1rem; position: relative; border-bottom: 2px solid var(--border-color); padding-bottom: 0.5rem; display: inline-block;}

/* Contenitori PDF e Immagini */
.pdf-container, .img-container {
    display: grid; /* Usa Grid Layout per entrambi */
    justify-content: center;
    gap: 1.2rem; /* Spazio tra le card */
}

/* Griglia Immagini (2 colonne su mobile) */
.img-container {
    grid-template-columns: repeat(2, 1fr);
}

/* Card Generica */
.file-card {
    background: var(--surface-color);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-soft);
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
    display: flex; /* Utile per allineare l'icona PDF */
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 0; /* Rimuovi padding se l'immagine deve toccare i bordi */
}
.file-card:hover { transform: translateY(-5px) scale(1.02); box-shadow: var(--shadow-hover); }

/* Card PDF */
.pdf-card {
    grid-column: 1 / -1; /* Occupa tutta la larghezza della griglia */
    padding: 1.5rem 1rem; /* Padding interno per l'icona e il testo */
    min-height: 150px;
    text-decoration: none; /* Rimuove sottolineatura se usato come link */
    color: inherit; /* Mantiene colore testo normale */
}
.pdf-card img {
    width: 60px; /* Dimensione icona PDF */
    height: auto;
    margin-bottom: 0.8rem;
}
.pdf-card p {
    font-size: 0.85em;
    font-weight: 500;
    word-break: break-word;
    color: #555;
    margin-top: 0.5rem;
}

/* Card Immagine */
.img-card {
     height: 150px; /* Altezza fissa per uniformit√† */
}
.img-card img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover; /* Immagine copre lo spazio */
}

/* Titolo Galleria (nascosto se non ci sono immagini) */
.gallery-title { grid-column: 1 / -1; margin-bottom: 1rem;}


/* Lightbox */
.lightbox {
    display: none; /* Nascosto per default */
    position: fixed;
    inset: 0; /* top:0; right:0; bottom:0; left:0; */
    background: rgba(0, 0, 0, 0.92);
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
}
.lightbox.visible {
    display: flex; /* Mostra quando ha la classe 'visible' */
    opacity: 1;
}
/* Contenuto (iframe per tutto) */
.lightbox-content {
    width: 90%; /* Larghezza/Altezza relativa */
    height: 85%;
    border-radius: var(--border-radius);
    background-color: #fff; /* Sfondo bianco per iframe */
    transition: transform 0.3s ease-out; /* Per la rotazione */
    overflow: hidden; /* Nasconde bordi iframe se necessario */
}
/* Nascondi elemento img, usiamo solo iframe */
#lightbox-img { display: none; }
#lightbox-iframe { display: block; width: 100%; height: 100%; border: none;}

/* Pulsante Chiudi */
.close { position: absolute; top: 15px; right: 25px; color: white; font-size: 2.5rem; cursor: pointer; line-height: 1; }

/* Controlli di Navigazione/Rotazione */
.lightbox-controls {
    margin-top: 1rem;
    display: flex;
    gap: 0.8rem;
}
.lightbox-controls button {
    background: white;
    border: none;
    padding: 0.6rem 1rem;
    border-radius: 8px;
    font-size: 1.5rem; /* Icone pi√π grandi */
    line-height: 1;
    margin: 0 0.3rem;
    cursor: pointer;
    transition: all 0.2s;
}
.lightbox-controls button:hover { background: #007ad6; color: white; transform: scale(1.05); }

/* Stili specifici per schermi pi√π grandi */
@media screen and (min-width: 768px) {
    header { text-align: left; padding: 1rem 2rem; flex-direction: row; justify-content: space-between; }
    header.hidden { /* Manteniamo l'effetto nascondi anche su desktop */
        opacity: 0;
        transform: translateY(-100%);
        pointer-events: none;
    }
    .nav-links { padding: 0; background: none; width: auto; } /* Nav torna normale */
    main { padding: 2rem; }
    .intro {text-align: left;}
    .titolo { font-size: 1.8rem; }
    .codice-dv { font-size: 1.4em; }
    h2 { font-size: 1.3rem; }
    .pdf-container { justify-content: flex-start; } /* PDF a sinistra */
    .img-container { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); } /* Pi√π colonne per immagini */
    .file-card { width: auto; /* Larghezza automatica nella griglia */ }
    .pdf-card { max-width: 50%; /* PDF occupa max met√† */ }
    .img-card { height: 180px; } /* Immagini pi√π alte */
}

/* Stili aggiuntivi per il Loader (se usi un loader.html separato) */
.loader-body { /* Applica questa classe al body del loader.html */
    display: flex; justify-content: center; align-items: center; height: 100vh;
    background: white; flex-direction: column; text-align: center;
}
.loader-container .spinner {
    border: 4px solid #e0e0e0; border-top: 4px solid #007ad6; border-radius: 50%;
    width: 60px; height: 60px; margin: 1rem auto; animation: spin 1s linear infinite;
}
@keyframes spin { to { transform: rotate(360deg); } }
.loader-logo { width: 220px; margin-bottom: 1rem; }
.loader-container p { color: #007ad6; font-weight: 500; font-size: 1rem; }
```eof

---
### \#\# 3. Codice `script.js` (Versione API - Adattata al Nuovo HTML)

Questo script √® quello che hai fornito tu, corretto per funzionare con la struttura HTML aggiornata e la logica API.

```javascript:Script Portale QR - API (Struttura Finale):script.js
document.addEventListener('DOMContentLoaded', async function () {
    // ==============================================
    // üîß CONFIGURAZIONE
    const API_KEY = 'AIzaSyBg_v7mveOrwTc0plNByUZ-BXjJOWv5AIg'; // Chiave API inserita
    // ==============================================

    // Elementi del DOM con i NUOVI ID
    const codiceDvDisplay = document.getElementById('codice-dv'); // Nuovo ID per il codice DV
    const pdfContainer = document.getElementById('pdf-container'); // Nuovo contenitore PDF
    const imgContainer = document.getElementById('img-container'); // Nuovo contenitore Immagini
    const imgGalleryTitle = document.querySelector('.galleria h2'); // Titolo galleria
    const pdfSectionTitle = document.querySelector('.documentazione h2'); // Titolo documentazione

    // Elementi Lightbox con NUOVI ID
    const lightbox = document.getElementById('lightbox');
    const lightboxIframe = document.getElementById('lightbox-iframe'); // Usiamo SOLO l'iframe
    const lightboxImg = document.getElementById('lightbox-img'); // NON usato in questa versione
    const closeLightboxBtn = document.getElementById('close-lightbox'); // Nuovo ID chiusura
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const rotateBtn = document.getElementById('rotate-btn'); // Pulsante rotazione

    let allFiles = []; // Array per tutti i file (PDF e Immagini)
    let currentGalleryFiles = []; // Array solo per le immagini (per navigazione)
    let currentIndex = -1; // Indice per la navigazione galleria
    let currentRotation = 0; // Rotazione attuale

    // Leggi i parametri dall'URL
    const params = new URLSearchParams(window.location.search);
    const projectCode = params.get('codiceDv');
    const folderId = params.get('folderId');

    console.log('[PORTALE] Folder ID ricevuto:', folderId);

    // Mostra Codice DV
    if (codiceDvDisplay && projectCode) {
        codiceDvDisplay.textContent = decodeURIComponent(projectCode);
    } else if (codiceDvDisplay) {
        codiceDvDisplay.textContent = 'N/D';
    }

    // Controlli API Key e Folder ID
    const errorContainer = pdfContainer || imgContainer || document.body; // Dove mostrare errori
    if (!API_KEY || API_KEY === 'INCOLLA_LA_TUA_CHIAVE_API_QUI') {
        errorContainer.innerHTML = `<p style="color:red;">‚ö†Ô∏è Chiave API mancante.</p>`;
        return;
    }
    if (!folderId) {
        errorContainer.innerHTML = `<p style="color:red;">‚ö†Ô∏è ID cartella mancante nell'URL.</p>`;
        return;
    }

    // Chiamata API Google Drive
    const apiUrl = `https://www.googleapis.com/drive/v3/files?q='${folderId}'+in+parents+and+trashed=false&fields=files(id,name,mimeType,thumbnailLink,webContentLink)&key=${API_KEY}`;
    console.log('[PORTALE] API URL:', apiUrl);

    try {
        const response = await fetch(apiUrl);
        const data = await response.json();

        if (data.error) {
            console.error('[PORTALE] Errore API:', data.error);
            errorContainer.innerHTML = `<p style="color:red;">Errore Google API: ${data.error.message}</p>`;
            return;
        }

        if (!data.files || data.files.length === 0) {
            errorContainer.innerHTML = `<p>Nessun file trovato in questa cartella.</p>`;
            // Nascondi titoli se non ci sono file
            if(pdfSectionTitle) pdfSectionTitle.style.display = 'none';
            if(imgGalleryTitle) imgGalleryTitle.style.display = 'none';
            return;
        }

        allFiles = data.files;
        renderFiles(allFiles); // Chiama la funzione per mostrare i file

    } catch (error) {
        console.error('[PORTALE] Errore di rete:', error);
        errorContainer.innerHTML = `<p style="color:red;">Errore nel collegamento con Google Drive.</p>`;
    }

    // ==============================================
    // üîπ FUNZIONE PRINCIPALE: RENDER FILE
    function renderFiles(files) {
        pdfContainer.innerHTML = ''; // Pulisce contenitori
        imgContainer.innerHTML = '';
        currentGalleryFiles = []; // Resetta la galleria per la navigazione

        let pdfFound = false;
        let imagesFound = false;

        // Ordina: PDF prima
        files.sort((a, b) => { /* ... logica ordinamento PDF ... */ });

        files.forEach((file) => {
            const isPdf = file.mimeType === 'application/pdf';

            // Crea la card
            const card = document.createElement('div');
            card.className = 'file-card';
            
            // Crea l'immagine o l'icona
            const thumbnail = document.createElement('img');
            thumbnail.className = 'thumbnail';
            thumbnail.alt = file.name;
            thumbnail.loading = 'lazy';

            if (isPdf) {
                card.classList.add('pdf-card');
                thumbnail.src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/1200px-PDF_file_icon.svg.png';
                // Aggiunge nome file sotto icona PDF
                const pdfName = document.createElement('p');
                pdfName.textContent = file.name;
                card.appendChild(thumbnail);
                card.appendChild(pdfName);
                pdfContainer.appendChild(card);
                pdfFound = true;
                 card.addEventListener('click', () => openLightbox(file.id, true)); // Apre PDF
            } else if (file.mimeType && file.mimeType.startsWith('image/')) {
                card.classList.add('img-card');
                thumbnail.src = file.thumbnailLink ? file.thumbnailLink.replace('=s220', '=s400') : ''; 
                thumbnail.onerror = () => { /* ... fallback ... */ };
                card.appendChild(thumbnail); // Solo immagine per card immagine
                imgContainer.appendChild(card);
                imagesFound = true;
                currentGalleryFiles.push(file); // Aggiunge a galleria
                 const imageIndex = currentGalleryFiles.length - 1; 
                 card.addEventListener('click', () => openLightbox(file.id, false, imageIndex)); // Apre immagine
            }
        });

        // Nasconde sezioni vuote
        if (!pdfFound && pdfSectionTitle) pdfSectionTitle.style.display = 'none';
        if (!imagesFound && imgGalleryTitle) imgGalleryTitle.style.display = 'none';

        // Attiva navigazione lightbox se ci sono immagini
        if(currentGalleryFiles.length > 0) {
           setupLightboxNavigation();
        } else {
             // Configura lightbox per solo PDF (senza navigazione)
             if(pdfFound) setupLightboxSinglePdf();
        }
    }

    // ==============================================
    // üîπ LIGHTBOX
    
    function openLightbox(fileId, isPdf, imageIndex = -1) {
        lightbox.classList.remove('hidden'); 
        lightbox.classList.add('visible'); 
        currentRotation = 0; 
        lightboxIframe.style.transform = `rotate(0deg)`; // Resetta rotazione visiva

        // Mostra SOLO l'iframe, nascondi img (semplificato)
        lightboxIframe.style.display = 'block';
        lightboxImg.style.display = 'none'; 
        
        // Usa sempre il link /preview
        lightboxIframe.src = `https://drive.google.com/file/d/${fileId}/preview`;
        
        // Gestisci visibilit√† controlli
        if (rotateBtn) rotateBtn.style.display = 'block'; // Rotazione sempre visibile
        const showNav = !isPdf && currentGalleryFiles.length > 1; // Navigazione solo per immagini multiple
        if (prevBtn) prevBtn.style.display = showNav ? 'block' : 'none';
        if (nextBtn) nextBtn.style.display = showNav ? 'block' : 'none';
        
        if (!isPdf) {
            currentIndex = imageIndex; // Aggiorna indice solo per immagini
        }
    }

    function closeLightbox() { /* ... come prima ... */ }
    function rotate() { /* ... come prima, ruota solo iframe ... */ }
    function navigate(dir) { /* ... come prima, usa currentGalleryFiles ... */ }

    // Setup listener una sola volta
    function setupLightboxNavigation(){
        if (setupLightboxNavigation.initialized) return; 
        setupLightboxNavigation.initialized = true; 
        // Aggiungi tutti i listener (close, rotate, prev, next, keydown, click esterno)
        // ... (codice listener come nella versione precedente) ...
    }
    // Setup listener per solo PDF
    function setupLightboxSinglePdf(){
         if (setupLightboxSinglePdf.initialized) return; 
         setupLightboxSinglePdf.initialized = true; 
         // Aggiungi solo listener per chiusura e rotazione
         closeLightboxBtn.addEventListener('click', closeLightbox);
         if (rotateBtn) rotateBtn.addEventListener('click', rotate);
         document.addEventListener('keydown', (e) => { /* ... solo Esc e R ...*/ });
         lightbox.addEventListener('click', (e) => { /* ... solo click esterno ... */ });
    }

    // ==============================================
    // üîπ EFFETTO HEADER
    const header = document.querySelector('header');
    if (header) {
        window.addEventListener('scroll', () => {
            if (window.scrollY > 50) header.classList.add('hidden'); 
            else header.classList.remove('hidden');
        });
    }
});
```eof